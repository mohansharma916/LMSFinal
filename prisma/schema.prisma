// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}


enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}

model Profile {
  id String @id @default(cuid()) 
  userId String @unique
  name String
  imageUrl String?  
  email String  

  role MemberRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id           String        @id @default(cuid()) @map("_id")
  userId       String
  title        String
  description  String?
  imageUrl     String?
  price        Float?
  isPublished  Boolean       @default(false)
  categoryId   String?
  category     Category?     @relation(fields: [categoryId], references: [id])
  chapters     Chapter[]
  purchases     Purchase[]
  attachements Attachement[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Category {
  id      String   @id @default(cuid()) @map("_id")
  name    String   @unique
  courses Course[]
}

model Attachement {
  id       String @id @default(cuid()) @map("_id")
  name     String
  url      String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
    createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Chapter {
  id                String             @id @default(cuid())
  title             String
  description       String?            @db.Text
  videoUrl          String?            @db.Text
  position          Int
  isPublished       Boolean            @default(false)
  isFree            Boolean            @default(false)
  courseId          String
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videoPlatformData VideoPlatformData?
  userProgress      UserProgress[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model VideoPlatformData {
  id         String  @id @default(cuid())
  chapterId  String  @unique
  assetId    String
  playbackId String?
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

    @@unique([userId, chapterId])
}


model Purchase {
  id String @id @default(cuid())
  userId String
  courseId String
  Course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

    @@unique([userId, courseId])

}


model StripeCustomer {
  id String @id @default(cuid())
  userId String @unique
  stripeCustomerId String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Logging {
  id        String   @id @default(cuid()) 
  url       String
  method    String
  body      String?
  response  String?
  statusCode Int?
  errorMessage String?
  createdAt DateTime @default(now())
}